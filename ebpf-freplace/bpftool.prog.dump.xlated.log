int k_tcp_connect(struct pt_regs * ctx):
; sk = (typeof(sk))PT_REGS_PARM1(ctx);
   0: (79) r2 = *(u64 *)(r1 +112)
; handle_new_connection(ctx, sk);
   1: (85) call pc+3#bpf_prog_93a5a8fde5afab51_handle_new_connection
; return stub_handler();
   2: (85) call pc+52#bpf_prog_0456a7fc6de84cc2_stub_handler
; return stub_handler();
   3: (b7) r0 = 0
   4: (95) exit
void handle_new_connection(struct pt_regs * ctx, struct sock * sk):
; void handle_new_connection(struct pt_regs *ctx, struct sock *sk)
   5: (bf) r8 = r2
   6: (bf) r6 = r1
   7: (b7) r1 = 0
; event_t ev = {};
   8: (63) *(u32 *)(r10 -8) = r1
   9: (7b) *(u64 *)(r10 -16) = r1
  10: (b7) r1 = 4
  11: (bf) r3 = r8
  12: (0f) r3 += r1
  13: (bf) r7 = r10
; 
  14: (07) r7 += -16
; ev.saddr = BPF_CORE_READ(sk, __sk_common.skc_rcv_saddr);
  15: (bf) r1 = r7
  16: (b7) r2 = 4
  17: (85) call bpf_probe_read_kernel#-100688
  18: (b7) r1 = 0
  19: (bf) r3 = r8
  20: (0f) r3 += r1
  21: (bf) r1 = r10
; 
  22: (07) r1 += -20
; ev.daddr = BPF_CORE_READ(sk, __sk_common.skc_daddr);
  23: (b7) r2 = 4
  24: (85) call bpf_probe_read_kernel#-100688
; ev.daddr = BPF_CORE_READ(sk, __sk_common.skc_daddr);
  25: (61) r1 = *(u32 *)(r10 -20)
; ev.daddr = BPF_CORE_READ(sk, __sk_common.skc_daddr);
  26: (63) *(u32 *)(r10 -12) = r1
  27: (b7) r1 = 14
  28: (bf) r3 = r8
  29: (0f) r3 += r1
  30: (bf) r1 = r10
; 
  31: (07) r1 += -20
; ev.sport = BPF_CORE_READ(sk, __sk_common.skc_num);
  32: (b7) r2 = 2
  33: (85) call bpf_probe_read_kernel#-100688
; ev.sport = BPF_CORE_READ(sk, __sk_common.skc_num);
  34: (69) r1 = *(u16 *)(r10 -20)
; ev.sport = BPF_CORE_READ(sk, __sk_common.skc_num);
  35: (6b) *(u16 *)(r10 -8) = r1
  36: (b7) r1 = 12
  37: (0f) r8 += r1
  38: (bf) r1 = r10
; 
  39: (07) r1 += -20
; ev.dport = bpf_ntohs(BPF_CORE_READ(sk, __sk_common.skc_dport));
  40: (b7) r2 = 2
  41: (bf) r3 = r8
  42: (85) call bpf_probe_read_kernel#-100688
; ev.dport = bpf_ntohs(BPF_CORE_READ(sk, __sk_common.skc_dport));
  43: (69) r1 = *(u16 *)(r10 -20)
; ev.dport = bpf_ntohs(BPF_CORE_READ(sk, __sk_common.skc_dport));
  44: (dc) r1 = be16 r1
; ev.dport = bpf_ntohs(BPF_CORE_READ(sk, __sk_common.skc_dport));
  45: (6b) *(u16 *)(r10 -6) = r1
; bpf_perf_event_output(ctx, &events, BPF_F_CURRENT_CPU, &ev, sizeof(ev));
  46: (bf) r1 = r6
  47: (18) r2 = map[id:76]
  49: (18) r3 = 0xffffffff
  51: (bf) r4 = r7
  52: (b7) r5 = 12
  53: (85) call bpf_perf_event_output#-99472
; }
  54: (95) exit
int stub_handler():
; bpf_printk("freplace, stub handler\n");
  55: (18) r1 = map[id:78][0]+0
  57: (b7) r2 = 24
  58: (85) call bpf_trace_printk#-90384
; return 0;
  59: (b7) r0 = 0
  60: (95) exit
